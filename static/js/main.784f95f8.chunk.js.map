{"version":3,"sources":["ColoredMap.tsx","CountryNameIDtable.tsx","DateSlider.tsx","CovidMap.tsx","ColorLegendVertical.tsx","index.tsx"],"names":["ColoredMap","props","basicMapProps","pathGenerator","this","renderBasicMap","colorScale","worldData","selector","selectAll","data","d","countryId","join","attr","countryGeo","infected","text","properties","name","projection","worldGeo","countryColor","sphereColor","d3","mapG","type","countryNameIDtable","formatDate","DateSlider","timeScale","handle","handleText","playInterWidth","cursorMoving","buttonTimer","currentCursorWidth","initDateSlider","bind","updateDateSlider","domain","startDate","endDate","range","sliderWidth","clamp","buttonG","style","on","select","transition","clearInterval","setInterval","playButtonStep","invert","h","onSliderDragged","trackOverlay","call","interrupt","x","nDays","Math","floor","getTime","insert","tickOffset","ticks","handleRadius","append","handleTextOffset","id","Component","topojson","require","CovidMap","state","dataDownloaded","colorScaleMax","sliderProps","undefined","worldCovid","Map","coloredMap","drawBasicMapSVG","getWorldData","date","getUTCDate","getUTCMonth","Promise","all","worldTopo","feature","objects","countries","features","forEach","day","Date","set","constructWorldCovidKey","isNullOrUndefined","createColorScale","logScale","svg","classed","scale","map","colorWidth","colorHeight","textwidth","ColorLegendVerticalG","n","length","i","colorLegendVertical","colorMapByDay","setState","zoom","scaleExtent","transform","todayWorldCovid","get","combineWordGeoAndCovid","coloringMap","Object","keys","country","countryData","Number","Array","from","values","ReactDOM","render","className","document","getElementById"],"mappings":"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","file":"static/js/main.784f95f8.chunk.js","sourcesContent":["import * as d3 from 'd3';\r\nimport './ColoredMap.css';\r\nimport { IWorldData } from './CovidMap';\r\n\r\nexport interface IBasicMap {\r\n  selector: any;\r\n  projection: any;\r\n  worldGeo: any;\r\n  countryColor: string;\r\n  sphereColor: string;\r\n}\r\n\r\nexport class ColoredMap {\r\n  basicMapProps: IBasicMap;\r\n  pathGenerator: any;\r\n\r\n  constructor(props: IBasicMap) {\r\n    this.basicMapProps = props;\r\n    this.renderBasicMap(this.basicMapProps);\r\n  }\r\n\r\n  coloringMap(colorScale: any, worldData: IWorldData[]) {\r\n    const mapG = this.basicMapProps.selector;\r\n\r\n    const countries = mapG\r\n      .selectAll('.country')\r\n      .data(worldData, (d: IWorldData) => d.countryId)\r\n      .join('path')\r\n        .attr('class', 'country')\r\n        .attr('d', (d: IWorldData) => this.pathGenerator(d.countryGeo))\r\n        .attr('fill', (d: IWorldData) => colorScale(d.infected));\r\n\r\n    countries.selectAll('title').data((d: any) => [d]).join('title')\r\n      .text((d: any) => `${d.countryGeo.properties.name}: ${d.infected}`); // set hover text\r\n  }\r\n\r\n  renderBasicMap(props: IBasicMap) {\r\n    const {selector, projection, worldGeo, countryColor, sphereColor} = props;\r\n\r\n    // map generator\r\n    const pathGenerator = d3.geoPath(projection);\r\n    this.pathGenerator = pathGenerator;\r\n\r\n    // draw sphere to the map\r\n    const mapG = selector;\r\n    mapG.selectAll('.sphere').data([null]).join('path')\r\n      .attr('class', 'sphere')\r\n      .attr('d', (d: any) => pathGenerator({ type: 'Sphere' }))\r\n      .attr('fill', sphereColor);\r\n\r\n    const countries = mapG.selectAll('.country').data(worldGeo).join('path')\r\n      .attr('class', 'country')\r\n      .attr('d', (d: any) => pathGenerator(d))\r\n      .attr('fill', countryColor);\r\n\r\n    countries.selectAll('title').data((d: any) => [d]).join('title')\r\n      .text((d: any) => `${d.properties.name}`); // set hover text\r\n\r\n    return mapG;\r\n  }\r\n\r\n}\r\n","export const countryNameIDtable = {\n  'date': null,\n  'Andorra': null,\n  'Bahrain': null,\n  'Saint Barthlemy': null,\n  'Saint Vincent and the Grenadines': null,\n  'Worldwide': null,\n  'Gibraltar': null,\n  'Guernsey': null,\n  'French Guiana': null,\n  'International': null,\n  'Faeroe Islands': null,\n  'Jersey': null,\n  'Liechtenstein': null,\n  'Maldives': null,\n  'Malta': null,\n  'San Marino': null,\n  'Saint Martin (French part)': null,\n  'Martinique': null,\n  'Monaco': null,\n  'French Polynesia': null,\n  'Reunion': null,\n  'Singapore': null,\n  'Vatican': null,\n  'Afghanistan': '004',\n  'South Africa': '710',\n  'Albania': '008',\n  'Algeria': '012',\n  'Bosnia and Herzegovina': '070',\n  'United Arab Emirates': '784',\n  'Saudi Arabia': '682',\n  'Argentina': '032',\n  'Armenia': '051',\n  'Australia': '036',\n  'Austria': '040',\n  'Azerbaijan': '031',\n  'Bangladesh': '050',\n  'Belarus': '112',\n  'Belgium': '056',\n  'Bhutan': '064',\n  'Bolivia': '068',\n  'Brazil': '076',\n  'Brunei': '096',\n  'Bulgaria': '100',\n  'Cambodia': '116',\n  'Cameroon': '120',\n  'Canada': '124',\n  'Chile': '152',\n  'China': '156',\n  'Colombia': '170',\n  'Croatia': '191',\n  'Cuba': '192',\n  'Cyprus': '196',\n  'Cote d\\'Ivoire': '384',\n  'Denmark': '208',\n  'Ecuador': '218',\n  'Egypt': '818',\n  'Estonia': '233',\n  'Burkina Faso': '854',\n  'Finland': '246',\n  'France': '250',\n  'Georgia': '268',\n  'Germany': '276',\n  'Greece': '300',\n  'Guyana': '328',\n  'Honduras': '340',\n  'Hungary': '348',\n  'Iceland': '352',\n  'India': '356',\n  'Indonesia': '360',\n  'Iran': '364',\n  'Iraq': '368',\n  'Ireland': '372',\n  'Israel': '376',\n  'Italy': '380',\n  'Jamaica': '388',\n  'Japan': '392',\n  'Jordan': '400',\n  'United Kingdom': '826',\n  'South Korea': '410',\n  'Kuwait': '414',\n  'Sri Lanka': '144',\n  'Latvia': '428',\n  'Lebanon': '422',\n  'Lithuania': '440',\n  'Luxembourg': '442',\n  'Macedonia': '807',\n  'Malaysia': '458',\n  'Mexico': '484',\n  'Moldova': '498',\n  'Mongolia': '496',\n  'Morocco': '504',\n  'Nepal': '524',\n  'Netherlands': '528',\n  'Nigeria': '566',\n  'Norway': '578',\n  'Oman': '512',\n  'Pakistan': '586',\n  'Palestine': '275',\n  'Panama': '591',\n  'Paraguay': '600',\n  'Peru': '604',\n  'Philippines': '608',\n  'Poland': '616',\n  'Portugal': '620',\n  'Qatar': '634',\n  'Czech Republic': '203',\n  'Democratic Republic of Congo': '180',\n  'Dominican Republic': '214',\n  'Costa Rica': '188',\n  'Romania': '642',\n  'Russia': '643',\n  'Senegal': '686',\n  'Serbia': '688',\n  'Slovakia': '703',\n  'Slovenia': '705',\n  'Spain': '724',\n  'United States': '840',\n  'Sweden': '752',\n  'Switzerland': '756',\n  'Thailand': '764',\n  'Togo': '768',\n  'Tunisia': '788',\n  'Turkey': '792',\n  'Ukraine': '804',\n  'Vietnam': '704',\n  'New Zealand': '554',\n};\n\nexport function prop<T, K extends keyof T>(obj: T, key: K) {\n  return obj[key];\n}\n","import React, { Component } from 'react';\r\nimport * as d3 from 'd3';\r\nimport './DateSlider.css';\r\n\r\nconst formatDate = d3.timeFormat('%d %b');\r\n\r\nexport interface IDateSliderProps {\r\n  selector: any;\r\n  startDate: Date;\r\n  endDate: Date;\r\n  sliderWidth: number;\r\n  tickOffset: number;\r\n  handleRadius: number;\r\n  handleTextOffset: number;\r\n  onSliderDragged: (date: Date) => void;\r\n}\r\n\r\nexport class DateSlider extends Component<IDateSliderProps, {}>  {\r\n  // used by slider\r\n  timeScale: any;\r\n  handle: any;\r\n  handleText: any;\r\n\r\n  // used by play button\r\n  playInterWidth: any;\r\n  cursorMoving = false;\r\n  buttonTimer: any;\r\n  currentCursorWidth = 0;\r\n\r\n  constructor(props: Readonly<IDateSliderProps>) {\r\n    super(props);\r\n\r\n    this.initDateSlider.bind(this);\r\n    this.updateDateSlider.bind(this);\r\n\r\n    const timeScale = d3\r\n      .scaleTime()\r\n      .domain([this.props.startDate, this.props.endDate])\r\n      .range([0, this.props.sliderWidth])\r\n      .clamp(true);\r\n    this.timeScale = timeScale;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const buttonG = this.props.selector\r\n      .selectAll('.button').data([null]).join('g')\r\n        .attr('class', 'button');\r\n    buttonG\r\n      .selectAll('rect').data([null]).join('rect')\r\n        .attr('height', '50')\r\n        .attr('width', '120')\r\n        .attr('x', '0')\r\n        .attr('y', '0')\r\n        .attr('rx', '10')\r\n        .attr('transform', 'translate(-150, -30)')\r\n        .attr('fill', '#cb1c1ede');\r\n    buttonG\r\n      .selectAll('text').data([null]).join('text')\r\n        .attr('fill', 'white')\r\n        .attr('transform', 'translate(-90, 5)')\r\n        .style('text-anchor', 'middle')\r\n        .text('Play');\r\n\r\n    buttonG\r\n      .on('mouseover', () => {\r\n        buttonG.select('rect').transition().attr('fill', '#696969');\r\n      })\r\n      .on('mouseout', () => {\r\n        if (buttonG.text() === 'Play') {\r\n          buttonG.select('rect').transition().attr('fill', '#cb1c1ede');\r\n        }\r\n      });\r\n\r\n    buttonG.on('click', () => {\r\n      if (buttonG.text() === 'Pause') {\r\n        this.cursorMoving = false;\r\n        clearInterval(this.buttonTimer);\r\n        buttonG.select('rect').transition().attr('fill', '#cb1c1ede');\r\n        buttonG.select('text').transition().text('Play');\r\n      } else {\r\n        this.cursorMoving = true;\r\n        this.buttonTimer = setInterval(playButtonStep, 100);\r\n        buttonG.select('rect').transition().attr('fill', '#696969');\r\n        buttonG.select('text').transition().text('Pause');\r\n      }\r\n    });\r\n\r\n    const playButtonStep = () => {\r\n      this.updateDateSlider(this.timeScale.invert(this.currentCursorWidth));\r\n      this.currentCursorWidth += this.playInterWidth; // move 1 tick per step\r\n      if (this.currentCursorWidth > this.props.sliderWidth + this.playInterWidth) {\r\n        this.cursorMoving = false;\r\n        this.currentCursorWidth = 0;\r\n        clearInterval(this.buttonTimer);\r\n        // timer = 0;\r\n        buttonG.select('rect').transition().attr('fill', '#cb1c1ede');\r\n        buttonG.select('text').transition().text('Play');\r\n      }\r\n    };\r\n\r\n    this.initDateSlider();\r\n  }\r\n\r\n  updateDateSlider (h: Date) {\r\n    // update position and text of label according to slider scale\r\n    this.handle\r\n      .attr('cx', this.timeScale(h));\r\n    this.handleText\r\n      .attr('x', this.timeScale(h))\r\n      .text(formatDate(h));\r\n\r\n    this.props.onSliderDragged(h);\r\n  }\r\n\r\n  initDateSlider () {\r\n    const selector = this.props.selector;\r\n\r\n    selector.selectAll('.track').data([null]).join('line')\r\n      .attr('class', 'track');\r\n    selector.selectAll('.track-inset').data([null]).join('line')\r\n      .attr('class', 'track-inset');\r\n    const trackOverlay = selector.selectAll('.track-overlay').data([null]).join('line')\r\n      .attr('class', 'track-overlay');\r\n    selector.selectAll('line')\r\n      .attr('x1', this.timeScale.range()[0])\r\n      .attr('x2', this.timeScale.range()[1]);\r\n\r\n    trackOverlay.call(\r\n      d3.drag()\r\n        .on('start.interrupt', () => selector.interrupt())\r\n        .on('start drag', () => {\r\n          this.currentCursorWidth = d3.event.x;\r\n          this.updateDateSlider(this.timeScale.invert(this.currentCursorWidth));\r\n        }),\r\n    );\r\n\r\n    // draw ticks, one per week\r\n    const nDays = Math.floor((this.props.endDate.getTime() - this.props.startDate.getTime())\r\n      / (1000 * 60 * 60 * 24 * 7));\r\n    this.playInterWidth = this.props.sliderWidth / ((nDays + 1) * 7);\r\n    selector\r\n      .insert('g', '.track-overlay')\r\n        .attr('class', 'ticks')\r\n        .attr('transform', `translate(0, ${this.props.tickOffset})`)\r\n        .selectAll('text')\r\n        .data(this.timeScale.ticks(nDays))\r\n        .join('text')\r\n          .attr('x', this.timeScale)\r\n          .attr('y', 10)\r\n          .attr('text-anchor', 'middle')\r\n          .text((d: Date) => formatDate(d));\r\n\r\n    // handle on the slider\r\n    this.handle = selector\r\n      .insert('circle', '.track-overlay')\r\n        .attr('class', 'handle')\r\n        .attr('r', this.props.handleRadius);\r\n\r\n    // text lable on handle\r\n    this.handleText = selector\r\n      .append('text')\r\n      .attr('class', 'handleText')\r\n      .attr('text-anchor', 'middle')\r\n      .text(formatDate(this.props.startDate))\r\n      .attr('transform', `translate(0, ${this.props.handleTextOffset})`);\r\n  }\r\n\r\n  render() {\r\n    return <div id=\"DateSlider\" />;\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport * as d3 from 'd3';\r\nimport { ColoredMap, IBasicMap } from './ColoredMap';\r\nimport { countryNameIDtable, prop } from './CountryNameIDtable';\r\nimport { colorLegendVertical } from './ColorLegendVertical';\r\nimport { DateSlider } from './DateSlider';\r\nimport { isNullOrUndefined } from 'util';\r\nimport './CovidMap.css';\r\n// tslint:disable-next-line: no-var-requires\r\nconst topojson = require('topojson-client');\r\n\r\nexport interface IWorldData {\r\n  countryId: string;\r\n  countryGeo: any;\r\n  infected: number;\r\n}\r\n\r\nexport class CovidMap extends Component<{}, {dataDownloaded: boolean, colorScaleMax: number, sliderProps: any}> {\r\n  state = {\r\n    dataDownloaded: false,\r\n    colorScaleMax: 10000,\r\n    sliderProps: undefined,\r\n  };\r\n\r\n  worldGeo: any;\r\n  worldCovid: Map<string, any> = new Map();\r\n  startDate: Date | undefined;\r\n  endDate: Date | undefined;\r\n\r\n  dataDownloaded = false;\r\n  colorScaleMax = 10000;\r\n\r\n  colorScale: any;\r\n\r\n  coloredMap: any;\r\n\r\n  constructor() {\r\n    super({});\r\n\r\n    this.drawBasicMapSVG.bind(this);\r\n    this.getWorldData();\r\n  }\r\n\r\n  constructWorldCovidKey(date: Date) {\r\n    return `${date.getUTCDate()}/${date.getUTCMonth() + 1}`;\r\n  }\r\n\r\n  async getWorldData() {\r\n    const [worldTopo, worldCovid]  = await Promise.all([\r\n      d3.json('https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json'),\r\n      d3.csv('https://covid.ourworldindata.org/data/total_cases.csv'),\r\n    ]);\r\n\r\n    // worldGeo.id is country. worldGeo.geometry contains type Polygon and coordinates array\r\n    this.worldGeo = (topojson.feature(worldTopo, worldTopo.objects.countries)).features;\r\n\r\n    worldCovid.forEach((day: any) => {\r\n      const date = new Date(day.date);\r\n      this.worldCovid.set(this.constructWorldCovidKey(date), day);\r\n      if (isNullOrUndefined(this.startDate) || this.startDate.getTime() > date.getTime()) {\r\n        this.startDate = date;\r\n      }\r\n      if (isNullOrUndefined(this.endDate) || this.endDate.getTime() < date.getTime()) {\r\n        this.endDate = date;\r\n      }\r\n    });\r\n\r\n    this.colorScale = this.createColorScale();\r\n    this.drawBasicMapSVG();\r\n  }\r\n\r\n  createColorScale() {\r\n    const colorScaleMax = this.state.colorScaleMax;\r\n    const logScale = d3.scaleLog()\r\n      .domain([1, colorScaleMax]);\r\n    const colorScale = d3.scaleSequential(\r\n        (d) => d3.interpolateReds( d === 0 ? d : logScale(d)) );\r\n    return colorScale;\r\n  }\r\n\r\n  drawBasicMapSVG() {\r\n    if (isNullOrUndefined(this.state.dataDownloaded)) {\r\n      return;\r\n    }\r\n\r\n    const width = 1024;\r\n    const height = 768;\r\n    const svg = d3.select('#CovidMap')\r\n      .selectAll('.svg-container').data([null]).join('div')\r\n        .classed('svg-container', true)\r\n        .selectAll('svg').data([null]).join('svg')\r\n          .classed('svg-content-responsive', true)\r\n          .attr('viewBox', `0 0 ${width} ${height}`)\r\n          .attr('preserveAspectRatio', `xMinYMin meet`);\r\n\r\n    svg\r\n      .selectAll('.title').data([null]).join('text')\r\n        .attr('class', 'title')\r\n        .text('COVID-19 Outbreak Across the World')\r\n        .attr('font-size', '1.5em')\r\n        .attr('font-family', 'sans-serif')\r\n        .attr('transform', `translate(270, 50)`);\r\n\r\n    // Grouping everything in the map\r\n    const mapG = svg\r\n      .selectAll('.map').data([null]).join('g')\r\n        .attr('class', 'map');\r\n    const basicMapProps: IBasicMap = {\r\n      selector: mapG,\r\n      projection: d3.geoNaturalEarth1().scale(125),\r\n      worldGeo: this.worldGeo,\r\n      countryColor: '#fff5f0',\r\n      sphereColor: '#3bb9b9bd',\r\n    };\r\n    const map = new ColoredMap(basicMapProps);\r\n    this.coloredMap = map;\r\n\r\n    // draw color legend\r\n    const colorLegendG = svg\r\n      .selectAll('.colorLegend').data([null]).join('g')\r\n        .attr('class', 'colorLegend')\r\n        .attr('transform', 'translate(200, 300) scale(0.5, 0.5)');\r\n    colorLegendVertical({\r\n      selector: colorLegendG,\r\n      colorScale: this.colorScale,\r\n      colorWidth: 20, colorHeight: 5, textwidth: 90,\r\n      colorScaleMax: this.state.colorScaleMax,\r\n    });\r\n\r\n    const sliderG = svg\r\n      .selectAll('.slider').data([null]).join('g')\r\n        .attr('class', 'slider')\r\n        .attr('transform', 'translate(200, 450) scale(0.5, 0.5)');\r\n    const sliderProps = {\r\n      selector: sliderG,\r\n      startDate: this.startDate as Date,\r\n      endDate: this.endDate as Date,\r\n      sliderWidth: 1200,\r\n      tickOffset: 10,\r\n      handleRadius: 10,\r\n      handleTextOffset: -20,\r\n      onSliderDragged: this.colorMapByDay.bind(this),\r\n    };\r\n    this.setState({\r\n      dataDownloaded: true,\r\n      colorScaleMax: this.state.colorScaleMax,\r\n      sliderProps,\r\n    }); // re-render\r\n\r\n    // zoom\r\n    const zoom = d3\r\n        .zoom()\r\n        .scaleExtent([1, 8])\r\n        .on('zoom', () => {\r\n            mapG.attr('transform', d3.event.transform);\r\n        });\r\n    svg.call(zoom as any); // somehow, when it is mapG.call, panning by drag became really hard\r\n  }\r\n\r\n  colorMapByDay(date: Date) {\r\n    // change color of map everyday\r\n    const todayWorldCovid = this.worldCovid.get(this.constructWorldCovidKey(date));\r\n    if (!isNullOrUndefined(todayWorldCovid)) {\r\n      const worldData = this.combineWordGeoAndCovid(this.worldGeo, todayWorldCovid);\r\n      this.coloredMap.coloringMap(this.colorScale, worldData);\r\n    }\r\n  }\r\n\r\n  combineWordGeoAndCovid(worldGeo: any, todayWorldCovid: any): IWorldData[] {\r\n    const map = new Map<number, IWorldData>();\r\n    worldGeo.forEach((countryGeo: any) => {\r\n      map.set(countryGeo.id, {\r\n        countryId: countryGeo.id,\r\n        countryGeo,\r\n        infected: 0,\r\n      });\r\n    });\r\n\r\n    Object.keys(todayWorldCovid).forEach((country: any) => {\r\n      const id = prop(countryNameIDtable, country);\r\n      const countryData: IWorldData | undefined = map.get(id);\r\n      if (!isNullOrUndefined(countryData)) {\r\n        countryData.infected = Number(todayWorldCovid[country]);\r\n        map.set(id, countryData);\r\n      }\r\n    });\r\n    return Array.from(map.values());\r\n  }\r\n\r\n  render() {\r\n    if (!isNullOrUndefined(this.state.sliderProps)) {\r\n      const sliderProps = this.state.sliderProps as any;\r\n      return <div id=\"CovidMap\">\r\n              <DateSlider {...sliderProps} />\r\n             </ div>;\r\n    }\r\n    return <div id=\"CovidMap\"/>;\r\n  }\r\n}\r\n","\r\nimport * as d3 from 'd3';\r\n\r\ninterface IColorLegendVerticalProps {\r\n  selector: any;\r\n  colorScale: any;\r\n  colorWidth: number;\r\n  colorHeight: number;\r\n  textwidth: number;\r\n  colorScaleMax: number;\r\n}\r\n\r\nexport function colorLegendVertical(props: IColorLegendVerticalProps) {\r\n\r\n  const { selector, colorScale, colorWidth, colorHeight, textwidth, colorScaleMax } = props;\r\n\r\n  const ColorLegendVerticalG = selector\r\n    .selectAll('#ColorLegendVertical').data([1]).join('g')\r\n      .attr('id', 'ColorLegendVertical');\r\n\r\n  const data = d3.range(0, colorScaleMax, colorScaleMax / 30);\r\n  const n = data.length;\r\n\r\n  // background\r\n  ColorLegendVerticalG\r\n    .selectAll('rect').data([null]).join('rect')\r\n      .attr('height', (n + 2) * colorHeight)\r\n      .attr('width', textwidth)\r\n      .attr('x', '1')\r\n      .attr('fill', 'white')\r\n      .attr('opacity', '0.7')\r\n      .attr('ry', colorHeight);\r\n\r\n  const labels = ColorLegendVerticalG\r\n    .selectAll('g').data(data).join('g')\r\n      .attr('class', 'ColorLegendVertical-label')\r\n      .attr('transform', (d: any, i: number) =>\r\n        `translate(${colorWidth / 2}, ${(i + 1) * colorHeight})`);\r\n      // .attr('cursor', 'pointer');\r\n\r\n  labels\r\n    .selectAll('rect').data((d: number) => [d]).join('rect')\r\n      .attr('width', colorWidth)\r\n      .attr('height', colorHeight)\r\n      .attr('fill', (d: number) => colorScale(d));\r\n\r\n  ColorLegendVerticalG.selectAll('.text0')\r\n    .data(['0']).join('text')\r\n      .attr('class', 'text0')\r\n      .text((d: string) => d)\r\n      .attr('font-size', colorWidth * 0.75)\r\n      .attr('x', colorWidth * 1.75)\r\n      .attr('y', colorWidth * 0.75);\r\n\r\n  ColorLegendVerticalG.selectAll('.textMax')\r\n    .data([`>${colorScaleMax}`]).join('text')\r\n      .attr('class', 'textMax')\r\n      .text((d: string) => d)\r\n      .attr('font-size', colorWidth * 0.75)\r\n      .attr('x', colorWidth * 1.75)\r\n      .attr('y', (n + 1) * colorHeight);\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { CovidMap } from './CovidMap';\n\nReactDOM.render(\n  <div className=\"container\">\n    <div className=\"container\">\n      <CovidMap />\n    </ div>\n  </ div>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}